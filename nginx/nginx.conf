lua_shared_dict discovery 1m;
lua_shared_dict jwks 1m;

resolver 127.0.0.11 valid=30s; # Resolver interno do Docker

# Caminho para os módulos Lua
lua_package_path "/usr/local/openresty/lualib/?.lua;;";
server {
    listen 8080;
    server_name auth.localhost;
    location / {
        proxy_pass http://keycloak:8080;
    }
}
server {
    listen 80;

    # Rota protegida
    location / {
        access_by_lua_block {
            local opts = {
                redirect_uri_path = "/redirect_uri",   -- URL de redirecionamento configurada no provedor OAuth2
                discovery = "http://keycloak:8080/realms/LOGIN/.well-known/openid-configuration", -- Endpoint de descoberta
                client_id = "login",          -- Substitua pelo seu client_id
                client_secret = "kSPiVsSZPfPGqTkApdEmJFibxPsnStz2",  -- Substitua pelo seu client_secret
                scope = "openid email profile",       -- Escopos solicitados
            }

            local res, err = require("resty.openidc").authenticate(opts)

            if err then
                ngx.status = 500
                ngx.say("Erro na autenticação: " .. err)
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end

            ngx.log(ngx.NOTICE, "Usuário autenticado: ", res.id_token.sub)
            ngx.req.set_header("Authorization", "Bearer " .. res.access_token)
            ngx.req.set_header("X-User", res.id_token.email)
        }

        proxy_pass http://login-app:8000;

    }

    # Rota de redirecionamento (callback do OAuth2)
    location /redirect_uri {
        content_by_lua_block {
            local res, err = require("resty.openidc").authenticate({
                redirect_uri_path = "/redirect_uri",
                discovery = "http://keycloak:8080/realms/LOGIN/.well-known/openid-configuration",
                client_id = "login",
                client_secret = "kSPiVsSZPfPGqTkApdEmJFibxPsnStz2",
            })

            if err then
                ngx.status = 500
                ngx.say("Erro no callback: " .. err)
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end

            ngx.redirect("/")
        }
    }

    # Rota de logout
    location /logout {
        content_by_lua_block {
            local session = require("resty.session").open()
            session:destroy() -- Limpa a sessão do lado do servidor

            local keycloak_logout_url = "http://auth.localhost:8080/realms/LOGIN/protocol/openid-connect/logout"
            local client_id = "login" -- Substitua pelo seu client_id
            local post_logout_redirect_uri = "http://localhost" -- Página para redirecionar após logout

            local logout_url = keycloak_logout_url ..
                "?client_id=" .. client_id ..
                "&post_logout_redirect_uri=" .. ngx.escape_uri(post_logout_redirect_uri)

            return ngx.redirect(logout_url)
        }
    }
}